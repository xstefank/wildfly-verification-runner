#!/bin/bash

# Created by argbash-init v2.8.1
# Rearrange the order of options below according to what you would like to see in the help message.
# ARG_OPTIONAL_SINGLE([command],[c],[the Maven command to be ran to build the project],[mvn clean install])
# ARG_OPTIONAL_SINGLE([versionLocation],[l],[the location of the version file],[version.txt])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='clh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_command="mvn clean install"
_arg_versionlocation="version.txt"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-c|--command <arg>] [-l|--versionLocation <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-c, --command: the Maven command to be ran to build the project (default: 'mvn clean install')"
	printf '\t%s\n' "-l, --versionLocation: the location of the version file (default: 'version.txt')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--command)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_command="$2"
				shift
				;;
			--command=*)
				_arg_command="${_key##--command=}"
				;;
			-c*)
				_arg_command="${_key##-c}"
				;;
			-l|--versionLocation)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_versionlocation="$2"
				shift
				;;
			--versionLocation=*)
				_arg_versionlocation="${_key##--versionLocation=}"
				;;
			-l*)
				_arg_versionlocation="${_key##-l}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


printf 'Value of --%s: %s\n' 'command' "$_arg_command"
printf 'Value of --%s: %s\n' 'versionFileLocation' "$_arg_versionlocation"

VERSION=$(git describe --tags --always)
echo $VERSION > "$_arg_versionlocation"

mvn versions:set -DnewVersion="$VERSION"

$_arg_command


# ] <-- needed because of Argbash
